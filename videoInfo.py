from youtube_transcript_api import YouTubeTranscriptApi
import re
from config import client, model_id, google_search_tool
from google.genai.types import (
    GenerateContentConfig,
)


def extract_video_id(url):
    try:
        match = re.search(r"v=([a-zA-Z0-9_-]+)", url)
        return match.group(1) if match else None
    except Exception as e:
        print(f"Error extracting video ID: {str(e)}")
        return None


def get_youtube_transcript(video_id):
    try:
        transcript = YouTubeTranscriptApi.get_transcript(video_id)
        full_text = " ".join([entry["text"] for entry in transcript])
        return full_text
    except Exception as e:
        print(f"Error getting transcript: {str(e)}")
        return None


def get_details(url):
    try:
        video_id = extract_video_id(url)
        if not video_id:
            raise ValueError("Invalid YouTube URL")

        transcript = get_youtube_transcript(video_id)
        if not transcript:
            raise ValueError("Could not get transcript")

        try:
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                contents=[
                    f"""Analyse the transcript of the YouTube video provided and share the title, write a detailed summary of the whole topic including timestamps so if I provide it in the next prompt the model can create a proper detailed blog on it, it should follow a format

                    Summary of the Video : {transcript}

              <title>[Title goes here]</title>

              <summary>[Summary goes here]</summary>

              <blog>[Blog goes here]</blog> ( in the blog portion create a very detailed blog on each point and make it in markdown format )

              that's it nothing more than that. Not a single text like 'okay here is a summary'"""
                ],
            )
            text = response.text
        except Exception as e:
            print(f"Error generating content: {str(e)}")
            return None, None, None

        try:
            # Extract title
            title_match = re.search(r"<title>(.*?)</title>", text, re.DOTALL)
            title = title_match.group(1).strip() if title_match else ""

            # Extract summary
            summary_match = re.search(r"<summary>(.*?)</summary>", text, re.DOTALL)
            summary = summary_match.group(1).strip() if summary_match else ""

            # Extract blog
            blog_match = re.search(r"<blog>(.*?)</blog>", text, re.DOTALL)
            blog = blog_match.group(1).strip() if blog_match else ""

            response = client.models.generate_content(
                model=model_id,
                contents=f"""{summary}
                This is the content we got from the youtube video.

                {blog}
                This is the blog generated by you right now
                Search on the web about news, updates and latest information to modify the whole blog and add more detailed content to generate a highly rich article with proper markdown and nothing else.
                The format should be <article>[article goes here]</article> and nothing else.""",
                config=GenerateContentConfig(
                    tools=[google_search_tool],
                    response_modalities=["TEXT"],
                ),
            )

            text = response.text
            # Extract article
            article_match = re.search(r"<article>(.*?)</article>", text, re.DOTALL)
            article = article_match.group(1).strip() if article_match else ""

            # response = client.models.generate_content(
            #     model="gemini-2.0-flash",
            #     contents=f"""{transcript}

            # This is the content we got from the youtube video.

            # Now you need to generate content for a flowchat so generate contnet one by one and just few words explaing how the user should go ahead in learning all this.

            # A straight forward process to approach everything that is available in the content.

            # The structure should be
            # `
            # <flowchart>
            # first thing
            # second thing
            # third thing
            # </flowchart>
            # `

            # and so on remember no numbering and no other text
            # """,
            # )

            # text = response.text
            # # Extract flowchart
            # flowchart_match = re.search(
            #     r"<flowchart>(.*?)</flowchart>", text, re.DOTALL
            # )
            # flowchart = flowchart_match.group(1).strip() if flowchart_match else ""

            # response = client.models.generate_content(
            #     model=model_id,
            #     contents=f"""Can you fetch me scientific reasearch papers, articles, blogs and youtube videos on {title}. Just provide links with a label of it's type I mean if it is a paper, article, blog or youtube videos
            #     The format should be <content>[content goes here]</content> and nothing else keep the content in markdown.""",
            #     config=GenerateContentConfig(
            #         tools=[google_search_tool],
            #         response_modalities=["TEXT"],
            #     ),
            # )

            # text = response.text
            # # Extract content
            # content_match = re.search(r"<content>(.*?)</content>", text, re.DOTALL)
            # content = content_match.group(1).strip() if content_match else ""

            return title, summary, blog, article
        except Exception as e:
            print(f"Error parsing response: {str(e)}")
            return None, None, None

    except Exception as e:
        print(f"Error in get_details: {str(e)}")
        return None, None, None
